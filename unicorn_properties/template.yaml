# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Unicorn Properties Service resources

#### METADATA
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - ES6000
        - I3011
        - I3013

#### PARAMETERS
Parameters:
  Stage:
    Type: String
    Default: local
    AllowedValues:
      - local
      - dev
      - prod

#### MAPPINGS
Mappings:
  LogsRetentionPeriodMap:
    local:
      Days: 3
    dev:
      Days: 3
    prod:
      Days: 14
  Constants:
    ServiceNamespace:
      Value: "unicorn.properties"
    ProjectName:
      Value: "AWS Serverless Developer Experience"

#### CONDITIONS
Conditions:
  IsProd: !Equals
    - !Ref Stage
    - Prod

#### GLOBALS
Globals:
  Function:
    Runtime: java17
    MemorySize: 512
    Timeout: 15
    Tracing: Active
    Architectures:
      - x86_64
    Environment:
      Variables:
        CONTRACT_STATUS_TABLE: !Ref ContractStatusTable
        EVENT_BUS: !Ref UnicornPropertiesEventBus
        SERVICE_NAMESPACE: !FindInMap [Constants, ServiceNamespace, Value]
        POWERTOOLS_SERVICE_NAME: !FindInMap [Constants, ServiceNamespace, Value]
        POWERTOOLS_TRACE_DISABLED: "false" # Explicitly disables tracing, default
        POWERTOOLS_LOGGER_LOG_EVENT: !If [IsProd, "false", "true"] # Logs incoming event, default
        POWERTOOLS_LOGGER_SAMPLE_RATE: !If [IsProd, "0.1", "0"] # Debug log sampling percentage, default
        POWERTOOLS_METRICS_NAMESPACE: !FindInMap [Constants, ServiceNamespace, Value]
        LOG_LEVEL: INFO # Log level for Logger (INFO, DEBUG, etc.), default
    Tags:
      stage: !Ref Stage
      project: !FindInMap [ Constants, ProjectName, Value ]
      namespace: !FindInMap [Constants, ServiceNamespace, Value]

#### RESOURCES
Resources:
  #### SSM PARAMETERS
  # Services own and share their namespace
  UnicornPropertiesNamespaceParam: 
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /uni-prop/${Stage}/UnicornPropertiesNamespace
      Value: !FindInMap [Constants, ServiceNamespace, Value]
      
  # Services share their event bus name and arn
  UnicornPropertiesEventBusNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /uni-prop/${Stage}/UnicornPropertiesEventBus
      Value: !GetAtt UnicornPropertiesEventBus.Name
      
  UnicornPropertiesEventBusArnParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /uni-prop/${Stage}/UnicornPropertiesEventBusArn
      Value: !GetAtt UnicornPropertiesEventBus.Arn

  #### LAMBDA FUNCTIONS
  ContractStatusChangedHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./PropertyFunctions
      Handler: Unicorn.Properties.PropertiesService::Unicorn.Properties.PropertiesService.ContractStatusChangedEventHandler::FunctionHandler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ContractStatusTable
        - DynamoDBReadPolicy:
            TableName: !Ref ContractStatusTable
      Events:
        StatusChangedEvent:
          Type: EventBridgeRule
          Properties:
            RuleName: properties.contstatuschangedhdr-contracts.contstatuschanged
            EventBusName: !GetAtt UnicornPropertiesEventBus.Name
            Pattern:
              source:
                - !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornContractsNamespace}}"
              detail-type:
                - ContractStatusChanged
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 900
            DeadLetterConfig:
              Arn: !GetAtt PropertiesEventBusRuleDLQ.Arn
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt PropertiesServiceDLQ.Arn

  PropertiesApprovalSyncFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./PropertyFunctions
      Handler: Unicorn.Properties.PropertiesService::Unicorn.Properties.PropertiesService.PropertiesApprovalSyncFunction::FunctionHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ContractStatusTable
        - DynamoDBStreamReadPolicy:
            TableName: !Ref ContractStatusTable
            StreamName:
              !Select [3, !Split ["/", !GetAtt ContractStatusTable.StreamArn]]
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PropertiesServiceDLQ.QueueName
        - Statement:
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
              Resource:
                - !Ref ApprovalStateMachine
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ContractStatusTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
            MaximumRetryAttempts: 3
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt PropertiesServiceDLQ.Arn
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt PropertiesServiceDLQ.Arn

  ContractExistsCheckerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PropertyFunctions
      Handler: properties.ContractExistsCheckerFunction::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContractStatusTable

  ContentIntegrityValidatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PropertyFunctions
      Handler: properties.ValidateContentIntegrityFunction::handleRequest

  WaitForContractApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PropertyFunctions
      Handler: properties.WaitForContractApprovalFunction::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContractStatusTable

  #### DLQs
  PropertiesEventBusRuleDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      Tags:
        - Key: project
          Value: !FindInMap [ Constants, ProjectName, Value ]
        - Key: namespace
          Value: !FindInMap [Constants, ServiceNamespace, Value]
        - Key: stage
          Value: !Ref Stage

  PropertiesServiceDLQ:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      SqsManagedSseEnabled: true
      MessageRetentionPeriod: 1209600 # Maximum value, 1,209,600 (14days)
      Tags:
        - Key: project
          Value: !FindInMap [ Constants, ProjectName, Value ]
        - Key: namespace
          Value: !FindInMap [Constants, ServiceNamespace, Value]
        - Key: stage
          Value: !Ref Stage

  #### STATE MACHINE
  ApprovalStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${AWS::StackName}-ApprovalStateMachine"
      DefinitionUri: state_machine/property_approval.asl.yaml
      Tracing:
        Enabled: true
      Policies:
        - AWSXRayDaemonWriteAccess
        - LambdaInvokePolicy:
            FunctionName: !Ref WaitForContractApprovalFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ContentIntegrityValidatorFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ContractExistsCheckerFunction
        - S3ReadPolicy:
            BucketName: !Sub "{{resolve:ssm:/uni-prop/${Stage}/ImagesBucket}}"
        - ComprehendBasicAccessPolicy: {}
        - RekognitionDetectOnlyPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: !GetAtt UnicornPropertiesEventBus.Name
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
                - cloudwatch:PutMetricData
              Resource: "*"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ApprovalStateMachineLogGroup.Arn
        Level: ALL
        IncludeExecutionData: true
      # Events:
      #   PubApproReqEvent:
      #     Type: EventBridgeRule
      #     Properties:
      #       RuleName: properties.pubapprovalwf-web.pubapprovalrequested
      #       EventBusName: !GetAtt UnicornPropertiesEventBus.Name
      #       Pattern:
      #         source:
      #           - !Sub "{{resolve:ssm:/uni-prop/${Stage}/UnicornWebNamespace}}"
      #         detail-type:
      #           - PublicationApprovalRequested
      #       RetryPolicy:
      #         MaximumRetryAttempts: 5
      #         MaximumEventAgeInSeconds: 900
      #       DeadLetterConfig:
      #         Type: SQS
      #         Destination: !GetAtt PropertiesServiceDLQ.Arn
      DefinitionSubstitutions:
        ContractExistsChecker: !GetAtt ContractExistsCheckerFunction.Arn
        WaitForContractApproval: !GetAtt WaitForContractApprovalFunction.Arn
        ContentIntegrityValidator: !GetAtt ContentIntegrityValidatorFunction.Arn
        ImageUploadBucketName: !Sub "{{resolve:ssm:/uni-prop/${Stage}/ImagesBucket}}"
        EventBusName: !GetAtt UnicornPropertiesEventBus.Name
        ServiceName: !FindInMap [Constants, ServiceNamespace, Value]

  #### CLOUDWATCH LOG GROUPS
  ContractStatusChangedHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ContractStatusChangedHandlerFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  PropertiesApprovalSyncFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PropertiesApprovalSyncFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  ContractExistsCheckerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ContractExistsCheckerFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  ContentIntegrityValidatorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ContentIntegrityValidatorFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  WaitForContractApprovalFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${WaitForContractApprovalFunction}"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  ApprovalStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/states/${AWS::StackName}-ApprovalStateMachine"
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  #### DYNAMODB TABLE
  ContractStatusTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: property_id
          AttributeType: S
      KeySchema:
        - AttributeName: property_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: project
          Value: !FindInMap [Constants, ProjectName, Value]
        - Key: namespace
          Value: !FindInMap [Constants, ServiceNamespace, Value]
        - Key: stage
          Value: !Ref Stage

  #### EVENT BUS

  # Event bus for Contract Service used to publish and consume events
  UnicornPropertiesEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub UnicornPropertiesBus-${Stage}

  # Event bus policy to restrict who can publish events (should only be services from ServiceNamespace)
  UnicornPropertiesEventsBusPublishPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref UnicornPropertiesEventBus
      StatementId: !Sub PropertiesPublishEventsPolicy-${Stage}
      Statement:
        Effect: Allow
        Principal:
          AWS:
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        Action: events:PutEvents
        Resource: !GetAtt UnicornPropertiesEventBus.Arn
        Condition:
          StringEquals:
            events:source:
              - !FindInMap [Constants, ServiceNamespace, Value]

  # Catchall rule used for development purposes.
  UnicornPropertiesCatchAllRule:
    Type: AWS::Events::Rule
    Properties:
      Name: contracts.catchall
      Description: Catch all events published by the contracts service.
      EventBusName: !Ref UnicornPropertiesEventBus
      EventPattern:
        account:
          - !Ref AWS::AccountId
        source:
          - !FindInMap [Constants, ServiceNamespace, Value]
      State: ENABLED #You may want to disable this rule in production
      Targets:
        - Arn: !GetAtt UnicornPropertiesCatchAllLogGroup.Arn
          Id: !Sub UnicornPropertiesCatchAllLogGroupTarget-${Stage}

  # CloudWatch log group used to catch all events
  UnicornPropertiesCatchAllLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub
        - "/aws/events/${Stage}/${NS}-catchall"
        - Stage: !Ref Stage
          NS: !FindInMap [Constants, ServiceNamespace, Value]
      RetentionInDays: !FindInMap [LogsRetentionPeriodMap, !Ref Stage, Days]

  # Permissions to allow EventBridge to send logs to CloudWatch
  EventBridgeCloudWatchLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub EvBToCWLogs-${AWS::StackName}
      # Note: PolicyDocument has to be established this way. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policydocument
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "delivery.logs.amazonaws.com",
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${UnicornPropertiesCatchAllLogGroup.Arn}"
              ]
            }
          ]
        }

##### OUTPUTS
Outputs:
  UnicornPropertiesEventBusName:
    Value: !GetAtt UnicornPropertiesEventBus.Name

  ContractStatusTableName:
    Value: !Ref ContractStatusTable

  ContractStatusChangedHandlerFunctionName:
    Value: !Ref ContractStatusChangedHandlerFunction
  ContractStatusChangedHandlerFunctionArn:
    Value: !GetAtt ContractStatusChangedHandlerFunction.Arn

  PropertiesApprovalSyncFunctionName:
    Value: !Ref PropertiesApprovalSyncFunction
  PropertiesApprovalSyncFunctionArn:
    Value: !GetAtt PropertiesApprovalSyncFunction.Arn

  ContractExistsCheckerFunctionName:
    Value: !Ref ContractExistsCheckerFunction
  ContractExistsCheckerFunctionArn:
    Value: !GetAtt ContractExistsCheckerFunction.Arn

  ContentIntegrityValidatorFunctionName:
    Value: !Ref ContentIntegrityValidatorFunction
  ContentIntegrityValidatorFunctionArn:
    Value: !GetAtt ContentIntegrityValidatorFunction.Arn

  WaitForContractApprovalFunctionName:
    Value: !Ref WaitForContractApprovalFunction
  WaitForContractApprovalFunctionArn:
    Value: !GetAtt WaitForContractApprovalFunction.Arn
